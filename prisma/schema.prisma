// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  HOD
  Employee
}

enum Gender {
  Male
  Female
}

enum EmployeeStatus {
  Contract
  Permanent
}

enum TypeOfLeave {
  Paid
  Unpaid
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}

enum AttendanceStatus {
  Present
  Absent
  Leave
  Half_day_leave
}

enum TaskStatus {
  Not_Started
  Paused
  In_Progress
  Done 
  Canceled
}

enum TaskPriority {
  High
  Medium
  Low
}

enum OvertimeStatus {
  Pending
  Approved
  Rejected
}

enum AnnouncementType {
  per_department
  general
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  hashedRt String?
  role UserRole

  admins Admin[]
  employees Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model Admin {
  id Int @id @default(autoincrement())
  name String
  phone String @unique

  user_id Int
  user User @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("admins")
}

model Employee {
  id Int @id @default(autoincrement())
  full_name String
  phone String @unique
  address String
  date_of_birth String
  gender Gender
  work_entry_date String
  employee_status EmployeeStatus

  user_id Int
  user User @relation(fields: [user_id], references: [id])

  department_id Int
  department Department @relation(fields: [department_id], references: [id])

  position_id Int
  position JobPosition @relation(fields: [position_id], references: [id])

  leave_requests LeaveRequest[]
  leave_allowances LeaveAllowance[]
  attendances Attendance[]
  employee_work_shifts EmployeeWorkShift[]
  salary_slips SalarySlip[]
  employee_tasks EmployeeTask[]
  assignedEmployees EmployeesOnAssignment[]
  overtimes Overtime[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("employees")
}

model Department {
  id Int @id @default(autoincrement())
  department_name String @unique
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  employees Employee[]
  department_documents DepartmentDocument[]
  announcements Announcement[]
  employee_tasks EmployeeTask[]

  @@map("departments")
}

model JobPosition {
  id Int @id @default(autoincrement())
  position_name String @unique
  description String
  basic_salary Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  employees Employee[]

  @@map("job_positions")
}

model DepartmentDocument {
  id Int @id @default(autoincrement())
  document_name String @unique
  document_file String @unique
  description String
  
  department_id Int
  department Department @relation(fields: [department_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("department_documents")
}

model Announcement {
  id Int @id @default(autoincrement())
  title String
  content String 
  date String
  announcement_type AnnouncementType @default(general)
  
  department_id Int?
  department Department? @relation(fields: [department_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("announcements")
}

model Leave {
  id Int @id @default(autoincrement())
  leave_name String @unique
  type_of_leave TypeOfLeave 
  value Float

  leave_request LeaveRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("leaves")
}

model LeaveRequest {
  id Int @id @default(autoincrement())
  start_date String
  end_date String 
  long_leave Int
  start_time String?
  end_time String?
  message String
  status LeaveStatus

  leave_id Int
  leave Leave @relation(fields: [leave_id], references: [id])

  employee_id Int
  employee Employee @relation(fields: [employee_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("leave_requests")
}

model LeaveAllowance {
  id Int @id @default(autoincrement())
  leave_allowances Float @default(12)
  year String

  employee_id Int @unique
  employee Employee @relation(fields: [employee_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("leave_allowances")
}

model Attendance {
  id Int @id @default(autoincrement())
  date String
  time_in String?
  time_out String?
  delay_minutes Int?
  status AttendanceStatus

  employee_id Int
  employee Employee @relation(fields: [employee_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("attendances")
}

model WorkShift {
  id Int @id @default(autoincrement())
  shift_name String
  start_time String
  end_time String

  employee_work_shifts EmployeeWorkShift[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("work_shifts")
}

model EmployeeWorkShift {
  id Int @id @default(autoincrement())

  employee_id Int
  employee Employee @relation(fields: [employee_id], references: [id])

  shift_id Int
  shift WorkShift @relation(fields: [shift_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("employee_work_shifts")
}

model EmployeeTask {
  id Int @id @default(autoincrement())
  task_title String
  task_description String
  deadline String
  status TaskStatus
  
  department_id Int
  department Department @relation(fields: [department_id], references: [id])

  priority   TaskPriority
  assigned_by Int?
  employee Employee? @relation(fields: [assigned_by], references: [id])
  completedAt String?
  notes      String?
  attachment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  assignedEmployees EmployeesOnAssignment[]

  @@map("employee_tasks")
}

model EmployeesOnAssignment {
  id Int @id @default(autoincrement())
  employee Employee @relation(fields: [employee_id], references: [id])
  employee_id Int
  task EmployeeTask @relation(fields: [employee_task_id], references: [id])
  employee_task_id Int

  @@map("employees_on_assignment")
}

model Overtime {
  id Int @id @default(autoincrement())
  employee_id Int
  employee Employee @relation(fields: [employee_id], references: [id])
  date String
  start_time String
  end_time String
  duration Float
  reason String
  status OvertimeStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("overtimes")
}

model SalarySlip {
  id Int @id @default(autoincrement())
  month Int
  year Int
  basic_salary Int
  overtime Int
  total_cuts Int
  net_salary Int

  employee_id Int
  employee Employee @relation(fields: [employee_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("salary_slips")
}